<?php

  /*
    maillearn-s.phs 0.3

    maillearn-s lets spamassassin learn HAM and SPAM through sa-learn
    and transfers the database to remote server to retrain the spam
    filter there.
  */

  // some composer magic
  require(__DIR__."/../vendor/autoload.php");

  // we use the SFTP class
  use phpseclib\Net\SFTP;

  require_once(__DIR__."/../unchroot/unchroot.phs");

  require_once(__DIR__."/maillearn-s.conf.phs");
  require_once(__DIR__."/maillearn-s.func.phs");

  // load optional config splitting
  $arg_config = get_server_config($argv);
  if (false !== $arg_config) {
    require_once($arg_config);
  }

  function maillearn_s($params) {
    // disallow concurrency (either by timeout or by lock file)
    if ((is_int(TIMEOUT) && disallow_concurrency(TIMEOUT)) ||
        (is_string(TIMEOUT) && disallow_concurrency(replace_placeholders(TIMEOUT, $params)))) {
      $ham_counter  = 0;
      $spam_counter = 0;

      // first of all clean up
      if (is_file(replace_placeholders(STATUS_PATH, $params))) {
        // kill last status file
        unlink(replace_placeholders(STATUS_PATH, $params));
      }

      // also forget all previously learned HAM and SPAM
      exec(SA_LEARN_CLEAR);

      // check if the required folders exist
      if (is_dir(dirname(replace_placeholders(PUSHINFO_PATH, $params))) &&
          is_dir(dirname(replace_placeholders(STATUS_PATH, $params)))) {
        // read ham folders
        if (null !== LOCAL_MAILDIR_CUR) {
          $folders = expand_path_list(replace_placeholders(LOCAL_MAILDIR_CUR, $params));
          if (false !== $folders) {
            foreach ($folders as $folders_item) {
              if (is_dir($folders_item)) {
                exec(SA_LEARN_HAM. " \"".escapeshellcmd($folders_item)."\"");

                print("HAM: ".$folders_item."\n");
                $ham_counter++;
              } else {
                print("IGNORE: ".$folders_item."\n");
              }
            }
          } else {
            print("INFO: no folders found in LOCAL_MAILDIR_CUR\n");
          }
        } else {
          print("INFO: LOCAL_MAILDIR_CUR disabled\n");
        }

        // read ham folders
        if (null !== LOCAL_MAILDIR_INBOX_CUR) {
          $folders = expand_path_list(replace_placeholders(LOCAL_MAILDIR_INBOX_CUR, $params));
          if (false !== $folders) {
            foreach ($folders as $folders_item) {
              if (is_dir($folders_item)) {
                exec(SA_LEARN_HAM." \"".escapeshellcmd($folders_item)."\"");

                print("HAM: ".$folders_item."\n");
                $ham_counter++;
              } else {
                print("IGNORE: ".$folders_item."\n");
              }
            }
          } else {
            print("INFO: no folders found in LOCAL_MAILDIR_INBOX_CUR\n");
          }
        } else {
          print("INFO: LOCAL_MAILDIR_INBOX_CUR disabled\n");
        }

        // read spam folders
        if (null !== LOCAL_MAILDIR_SPAM_CUR) {
          $folders = expand_path_list(replace_placeholders(LOCAL_MAILDIR_SPAM_CUR, $params));
          if (false !== $folders) {
            foreach ($folders as $folders_item) {
              if (is_dir($folders_item)) {
                exec(SA_LEARN_SPAM." \"".escapeshellcmd($folders_item)."\"");

                print("SPAM: ".$folders_item."\n");
                $spam_counter++;
              } else {
                print("IGNORE: ".$folders_item."\n");
              }
            }
          } else {
            print("INFO: no folders found in LOCAL_MAILDIR_SPAM_CUR\n");
          }
        } else {
          print("INFO: LOCAL_MAILDIR_SPAM_CUR disabled\n");
        }

        // only proceed if we had HAM and SPAM
        if ((0 < $ham_counter) && (0 < $spam_counter)) {
          // first save the current HAM and SPAM
          exec(SA_LEARN_SYNC);

          // then backup everything to a file
          exec(SA_LEARN_BACKUP." \"".escapeshellcmd(replace_placeholders(STATUS_PATH, $params))."\"");

          // if we really created a file
          if (is_file(replace_placeholders(STATUS_PATH, $params))) {
            // connect via SFTP
            $sftp = new SFTP(REMOTE_HOSTNAME, REMOTE_PORT);

            // clear the statcache to prevent side effects
            $sftp->clearStatCache();

            $remote_pubkey = null;
            if (file_exists(replace_placeholders(REMOTE_PUBKEY_FILE, $params))) {
              $remote_pubkey = file_get_contents(replace_placeholders(REMOTE_PUBKEY_FILE, $params));
            }

            // check if the remote public key is correct
            if ((null === REMOTE_PUBKEY_FILE) ||
                (0 === strcmp(trim($sftp->getServerPublicHostKey()), trim($remote_pubkey)))) {
              // login via SFTP
              if ($sftp->login(REMOTE_USERNAME, REMOTE_PASSWORD)) {
                $local  = replace_placeholders(STATUS_PATH, $params);
                $remote = replace_placeholders(REMOTE_PATH, $params);

                // default
                $success = false;

                // upload the backup - the last parameter "1" means to read from file $local
                if ($sftp->put($remote, $local, 1)) {
                  $local_size  = filesize($local);
                  $remote_size = $sftp->filesize($remote);

                  // check if files have same size
                  if ((false !== $local_size) &&
                      (false !== $remote_size) &&
                      ($local_size === $remote_size)) {
                    file_put_contents(replace_placeholders(PUSHINFO_PATH, $params),
                                      $ham_counter.PUSHINFO_MESSAGE_HAM.
                                      $spam_counter.PUSHINFO_MESSAGE_SPAM);

                    print("SUCCESS: done\n");
                  } else {
                    // try to remove remote file
                    $sftp->delete($remote);

                    print("FAIL: filesize mismatch\n");
                  }
                } else {
                  // try to remove remote file
                  $sftp->delete($remote);

                  print("FAIL: write failed\n");
                }
              } else {
                print("ERROR: SFTP login failed\n");
              }
            } else {
              print("ERROR: remote public key mismatch\n");
            }

            $sftp = null;
          } else {
            print("ERROR: status export failed\n");
          }
        } else {
          print("INFO: no spam and ham folders found\n");
        }
      } else {
        print("ERROR: not all local paths accessible\n");
      }

      // free lock
      if (is_int(TIMEOUT)) {
        allow_concurrency(TIMEOUT);
      } else {
        allow_concurrency(replace_placeholders(TIMEOUT, $params));
      }
    } else {
      print("ERROR: setting timeout failed\n");
    }
  }

  if (defined("LOCAL_MAILDIR_CUR") &&
      defined("LOCAL_MAILDIR_INBOX_CUR") &&
      defined("LOCAL_MAILDIR_SPAM_CUR") &&
      defined("REMOTE_PATH") &&
      defined("REMOTE_HOSTNAME") &&
      defined("REMOTE_PORT") &&
      defined("REMOTE_PUBKEY_FILE") &&
      defined("REMOTE_USERNAME") &&
      defined("REMOTE_PASSWORD") &&
      defined("PUSHINFO_PATH") &&
      defined("STATUS_PATH") &&
      defined("PUSHINFO_MESSAGE_HAM") &&
      defined("PUSHINFO_MESSAGE_SPAM") &&
      defined("SA_LEARN_CLEAR") &&
      defined("SA_LEARN_HAM") &&
      defined("SA_LEARN_SPAM") &&
      defined("SA_LEARN_SYNC") &&
      defined("SA_LEARN_BACKUP") &&
      defined("TIMEOUT")) {
    // retrieve server parameter
    $params = array();
    if (false !== get_server($argv)) {
      $params["server"] = get_server($argv);
    }

    // execute
    maillearn_s($params);
  } else {
    print("ERROR: missing configuration - split \$config?\n");
  }

?>
